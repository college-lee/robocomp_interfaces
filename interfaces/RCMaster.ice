	
	//******************************************************************
// 
//  Generated by IDSL to IDL Translator
//  
//  File name: RCMASTER.idl
//  Source: RCMASTER.idsl
//  
//******************************************************************   
#ifndef ROBOCOMPRCMASTER_ICE
#define ROBOCOMPRCMASTER_ICE

module RoboCompRCMaster
{ 
	
    //information about the host
    struct hostInfo {
        string publicIP;
        string privateIP;
        string hostName="localhost";
    };
    
    //stores interface info
    struct interfaceData{
        string name;
        int port=0;
        string protocol="tcp";
    };
    sequence <interfaceData> interfaceList;
    
    //stores info about an component
    struct compData {
        string uid;
        string name;
        hostInfo host;
        interfaceList interfaces;
    };

    //database of all registred components
    sequence <compData> compDB;

    //cache db
    dictionary <compData, int> cacheDb;

    //Exceptions
    exception InvalidComponent{ 
        compData component;
        string message;
    };
    
    exception DuplicateComponent{ compData component; };
    
    exception ComponentNotFound { compData component; };
    
    exception PortAssignError {
        int port;
        string errorMessage;
    };


    
    interface rcmaster
    {

        // register a component (and assaign ports) , and monitor (restart if fail?)
        void registerComp(compData compInfo, bool monitor, bool assignPort, out interfaceList idata)
            throws InvalidComponent, DuplicateComponent, PortAssignError;
        
        //just update the database, dont assign ports
        void updateDb(compDB components)
            throws InvalidComponent, DuplicateComponent;

        //get all comps which pass the filter 
        idempotent void getComps(compData filter, bool block, out compDB comps);

        //an simple funcion to find port of components with single interface
        idempotent int getComPort(string compName, string hostName, bool block)
            throws ComponentNotFound;

        //flush the current cache or/and db
        idempotent void flush(bool maindb);

    };
};


#endif
