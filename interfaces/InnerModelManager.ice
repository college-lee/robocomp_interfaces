//******************************************************************
// 
//  Generated by IDSL to IDL Translator
//  
//  File name: InnerModelManager.idl
//  Source: InnerModelManager.idsl
//  
//******************************************************************   
#ifndef ROBOCOMPINNERMODELMANAGER_ICE
#define ROBOCOMPINNERMODELMANAGER_ICE

module RoboCompInnerModelManager{
	exception InnerModelManagerError{string text;};
	enum NodeType{Transform, Joint, DifferentialRobot, Plane, Camera, RGBD, IMU, Laser, Mesh, PointCloud, TouchSensor};
	["cpp:comparable"]
	struct AttributeType{
		string type;
		string value;
	};
	dictionary<string, AttributeType>AttributeMap;
	["cpp:comparable"]
	struct NodeInformation{
		NodeType nType;
		AttributeMap attributes;
		string id;
		string parentId;
	};
	sequence <NodeInformation> NodeInformationSequence;
	enum ErrorType{NonExistingNode, NonExistingAttribute, NodeAlreadyExists, AttributeAlreadyExists, InvalidPath, InvalidEngine, InvalidValues, OperationInvalidNode, InternalError, Collision};
	["cpp:comparable"]
	struct Colored3DPoint{
		byte r;
		byte g;
		byte b;
		float x;
					float y;
					float z;
				};
	sequence <Colored3DPoint> PointCloudVector;
	["cpp:comparable"]
	struct Plane3D{
		float px;
					float py;
					float pz;
					float nx;
					float ny;
					float nz;
					float width;
					float height;
					float thickness;
					string texture;
	};
	["cpp:comparable"]
	struct coord3D{
		float x;
					float y;
					float z;
				};
	["cpp:comparable"]
	struct Pose3D{
		float x;
					float y;
					float z;
					float rx;
					float ry;
					float rz;
				};
	["cpp:comparable"]
	struct jointType{
		Pose3D pose;
		int port;
		float lx;
					float ly;
					float lz;
					float hx;
					float hy;
					float hz;
					float mass;
					float min;
					float max;
					string axis;
	};
	["cpp:comparable"]
	struct meshType{
		Pose3D pose;
		int render;
		float scaleX;
					float scaleY;
					float scaleZ;
					string meshPath;
	};
	sequence <float> FloatSeq;
				["cpp:comparable"]
	struct Matrix{
		FloatSeq data;
		int cols;
		int rows;
	};

	interface InnerModelManager{
		bool addTransform(string item, string engine, string base, Pose3D pose)throws InnerModelManagerError;
		bool addJoint(string item, string base, jointType j)throws InnerModelManagerError;
		bool addMesh(string item, string base, meshType m)throws InnerModelManagerError;
		bool addPlane(string item, string base, Plane3D plane)throws InnerModelManagerError;
		void  getAllNodeInformation(out NodeInformationSequence nodesInfo)throws InnerModelManagerError;
		bool setPose(string base, string item, Pose3D pose)throws InnerModelManagerError;
		bool setPoseFromParent(string item, Pose3D pose)throws InnerModelManagerError;
		bool getPose(string base, string item, out Pose3D pose)throws InnerModelManagerError;
		bool getPoseFromParent(string item, out Pose3D pose)throws InnerModelManagerError;
		bool setPlane(string item, Plane3D plane)throws InnerModelManagerError;
		bool transform(string base, string item, coord3D coordInItem, out coord3D coordInBase)throws InnerModelManagerError;
		Matrix getTransformationMatrix(string base, string item)throws InnerModelManagerError;
		bool setScale(string item, float scaleX, float scaleY, float scaleZ)throws InnerModelManagerError;
		bool addAttribute(string idNode, string name, string type, string value)throws InnerModelManagerError;
		bool removeAttribute(string idNode, string name)throws InnerModelManagerError;
		bool setAttribute(string idNode, string name, string type, string value)throws InnerModelManagerError;
		bool getAttribute(string idNode, string name, out string type, out string value)throws InnerModelManagerError;
		bool removeNode(string item)throws InnerModelManagerError;
		bool collide(string a, string b);
		void  setPointCloudData(string id, PointCloudVector cloud);
	};
};
  
#endif