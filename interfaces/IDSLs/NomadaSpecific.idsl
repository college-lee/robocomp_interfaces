module RoboCompNomadaSpecific{
		
	// Structure for operation mode
	struct Mode{
		byte m;		// selects operation mode [0/1]; 0 -> pose commands; 1 -> velocity commands 
	};
	
	// Struct for speed commands	
	struct RobotSpeed{
		float advance;			// [mm/s]; + -> front
		float wheelRotation;	// [rad/s]; + -> clockwise
		float waistRotation; 	// [rad/s]; + -> clockwise
	};
	
	// Struct for pose commands
	struct RobotPose{
		float wheelAngle;		// [rad]; + -> clockwise
		float waistAngle;		// [rad]; + -> clockwise
	};
	
	// Struct for odometry
	struct Odometry{
		float z;		// [mm] odometry z coordinate; + -> front
		float x;		// [mm] odometry x coordinate; + -> right
	};	
	
	// Struct for Robot's current state
	struct RobotState{
		Odometry odom;		// position in space
		RobotSpeed speed;	// speed (joint speeds)
		RobotPose pose;		// pose (joint angles)
	};
	
	// Type for sensor's distance
	sequence <float> Dist;
	
	// Struct for proximity sensors
	struct Sensors{
		byte selectBumper;		// select bumper (1) or not (0) to enable/disable/read
		int bumperPushed;		// return pushed bumper (if selected in read)
		
		byte selectIR;			// select infrared (1) or not (0) to enable/disable/read
		Dist distIR;			// [mm] distances read by IR sensors (if selected in read)
		float thresholdIR;		// [mm] threshold to consider alarm in IR sensors
		
		byte selectSonar;		// select sonar (1) or not (0) to enable/disable/read
		Dist distSonar;			// [mm] distances read by Sonar sensors (if selected in read)
		float thresholdSonar;	// [mm] threshold to consider alarm in Sonar sensors
	};
	
	// Struct for Power Supply commands
	struct PowerSupply{
		float level12;	// [V] 12 V battery level	 
		float level24;	// [V] 24 V battery level
	};
	
	struct NoData{
		byte empty;
	};
	
	
	interface NomadaSpecific{
		// Operation mode
		[command] void setOperationMode(Mode mode);	// set operation mode
		
		// Odometry
		[query] void getRobotState(out RobotState state);	// read current state
		[command] void setOdometry(Odometry odom);	 		// set odometry to specific values
		[command] void resetOdometry(Odometry zero);	 	// reset odometry to zero
		
		// Movement comannds
		[command] void resetRobotPose(RobotPose zero);	 	// bring robot's joints to their zero-position (it also resets odometry)
		[command] void setRobotSpeed(RobotSpeed speed);	// set joint speeds
		[command] void setRobotPose(RobotSpeed speed);	 	// set joint poses
		
		// Proximity Sensors
		[command] void enableSensors(Sensors sen);			// enable selected sensors
		[command] void disableSensors(Sensors sen);		// disable selected sensors
		[command] void setSensorsThreshold(Sensors sen);	// set threshold for selected sensors
		[query] void getSensors(out Sensors sen);			// read selected sensors
		
		// Power Supply 
		[query] void getBatteryLevel(out PowerSupply pow);		// read battery levels
		[command] void setMinimumLevel(PowerSupply pow);		// set minimun voltage level for batteries
		
		// Open CD
		[command] void openCD(NoData empty);				// open CDROM
	};
};
