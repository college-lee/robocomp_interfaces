module RoboCompTrajectoryRobot2D
{
	exception RoboCompException
	{
	  string text;
	};
	
	struct TargetPose
	{
		float x;								// millimeters
		float y;
		float z;
		float rx;	
		float ry;								//radians
		float rz;
		bool doRotation;						// if True orientates the robot at ry radians with the world z axis (around world's yaxis)
	};

	struct NavState
	{
		long elapsedTime;
		string state;
		long estimatedTime;
		long planningTime;
	};

	interface TrajectoryRobot2D
	{
		void go(TargetPose target) throws RoboCompException;			// Takes the robot to target. ry is orientation if doRotation is True
		void goBackwards(TargetPose target) throws RoboCompException;	// Moves the robot directly backwards
		void changeTarget(TargetPose target)throws RoboCompException;	// Change last point of curent trajectory
		NavState getState();											// Get current state
		void stop();													// Stop the robot
	};
};
  