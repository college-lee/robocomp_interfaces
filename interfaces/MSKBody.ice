//******************************************************************
// 
//  Generated by IDSL to IDL Translator
//  
//  File name: MSKBody.idl
//  Source: MSKBody.idsl
//  
//******************************************************************   
#ifndef ROBOCOMPMSKBODY_ICE
#define ROBOCOMPMSKBODY_ICE

module RoboCompMSKBody{
	["cpp:comparable"]
	struct Vector4{
		float W;
					float X;
					float Y;
					float Z;
				};
	["cpp:comparable"]
	struct Matrix4{
		float M11;
					float M12;
					float M13;
					float M14;
					float M21;
					float M22;
					float M23;
					float M24;
					float M31;
					float M32;
					float M33;
					float M34;
					float M41;
					float M42;
					float M43;
					float M44;
				};
	["cpp:comparable"]
	struct BoneRotation{
		Matrix4 Matrix;
		Vector4 Quaternion;
	};
	enum JointType{HipCenter, Spine, ShoulderCenter, Head, ShoulderLeft, ElbowLeft, WristLeft, HandLeft, ShoulderRight, ElbowRight, WristRight, HandRight, HipLeft, KneeLeft, AnkleLeft, FootLeft, HipRight, KneeRight, AnkleRight, FootRight};
	["cpp:comparable"]
	struct BoneOrientation{
		BoneRotation AbsoluteRotation;
		JointType EndJoint;
		BoneRotation HierarchicalRotation;
		JointType StartJoint;
	};
	sequence <BoneOrientation> BoneOrientations;
	enum FrameEdges{None, Right, Left, Top, Bottom};
	enum stateType{NoTracking, PositionOnly, Tracking};
	enum JointTrackingState{NotTracked, Inferred, Tracked};
	["cpp:comparable"]
	struct SkeletonPoint{
		float X;
					float Y;
					float Z;
				};
	["cpp:comparable"]
	struct DepthImagePoint{
		int X;
		int Y;
		int Depth;
	};
	["cpp:comparable"]
	struct ColorImagePoint{
		int X;
		int Y;
	};
	["cpp:comparable"]
	struct Joint{
		JointTrackingState state;
		SkeletonPoint Position;
	};
	dictionary<JointType, Joint>JointList;
	["cpp:comparable"]
	struct TPerson{
		JointList joints;
		stateType state;
		SkeletonPoint Position;
		BoneOrientations boneOrien;
		FrameEdges ClippedEdges;
		int TrackingId;
	};
	dictionary<int, TPerson>PersonList;
	sequence <byte> TImg;
	sequence <short> TDepth;

	interface MSKBody{
		void  getUserList(out PersonList personListIn);
		void  getRTMatrixList(int id, out JointList jointListIn);
		stateType getUserState(int id);
		int getNumUsers();
		void  getPerson(int TrackingId, out TPerson person);
		void  getJointPixelPosition(int id, JointType nameJoint, out ColorImagePoint point);
		void  colorImagePointToSkeletonPoint(ColorImagePoint point, out SkeletonPoint point3D);
		void  colorImagePointToDepthImagePoint(ColorImagePoint point, out DepthImagePoint depthPoint);
		void  skeletonPointToColorImagePoint(SkeletonPoint point3D, out ColorImagePoint point);
		void  skeletonPointToDepthImagePoint(SkeletonPoint point3D, out DepthImagePoint depthPoint);
		void  depthImagePointToSkeletonPoint(DepthImagePoint depthPoint, out SkeletonPoint point3D);
		void  depthImagePointToColorImagePoint(DepthImagePoint depthPoint, out ColorImagePoint point);
		void  getDepth(out TDepth imgDepth);
	};
	interface MSKBodyEvent{
		void  newMSKBodyEvent(PersonList people, long timestamp);
	};
};
  
#endif